[{"E:\\web development\\connect\\frontend\\src\\index.js":"1","E:\\web development\\connect\\frontend\\src\\App.js":"2","E:\\web development\\connect\\frontend\\src\\reportWebVitals.js":"3","E:\\web development\\connect\\frontend\\src\\ApolloProvider.js":"4","E:\\web development\\connect\\frontend\\src\\provider.js":"5","E:\\web development\\connect\\frontend\\src\\Pages\\Home.js":"6","E:\\web development\\connect\\frontend\\src\\Pages\\Login.js":"7","E:\\web development\\connect\\frontend\\src\\Pages\\Register.js":"8","E:\\web development\\connect\\frontend\\src\\Components\\Navbar.js":"9","E:\\web development\\connect\\frontend\\src\\Components\\PostCard.js":"10","E:\\web development\\connect\\frontend\\src\\util\\hooks.js":"11","E:\\web development\\connect\\frontend\\src\\context\\auth.js":"12","E:\\web development\\connect\\frontend\\src\\util\\AuthRoute.js":"13","E:\\web development\\connect\\frontend\\src\\Components\\PostForm.js":"14","E:\\web development\\connect\\frontend\\src\\util\\graphql.js":"15","E:\\web development\\connect\\frontend\\src\\Components\\likebtn.js":"16","E:\\web development\\connect\\frontend\\src\\Pages\\SinglePost.js":"17","E:\\web development\\connect\\frontend\\src\\Components\\DeleteButton.js":"18","E:\\web development\\connect-client\\src\\index.js":"19","E:\\web development\\connect-client\\src\\ApolloProvider.js":"20","E:\\web development\\connect-client\\src\\reportWebVitals.js":"21","E:\\web development\\connect-client\\src\\App.js":"22","E:\\web development\\connect-client\\src\\Pages\\Login.js":"23","E:\\web development\\connect-client\\src\\context\\auth.js":"24","E:\\web development\\connect-client\\src\\Pages\\Home.js":"25","E:\\web development\\connect-client\\src\\Components\\Navbar.js":"26","E:\\web development\\connect-client\\src\\Pages\\SinglePost.js":"27","E:\\web development\\connect-client\\src\\Pages\\Register.js":"28","E:\\web development\\connect-client\\src\\util\\AuthRoute.js":"29","E:\\web development\\connect-client\\src\\util\\hooks.js":"30","E:\\web development\\connect-client\\src\\util\\graphql.js":"31","E:\\web development\\connect-client\\src\\Components\\PostCard.js":"32","E:\\web development\\connect-client\\src\\Components\\PostForm.js":"33","E:\\web development\\connect-client\\src\\Components\\likebtn.js":"34","E:\\web development\\connect-client\\src\\Components\\DeleteButton.js":"35","E:\\web development\\connect-client\\src\\Components\\UserCard.js":"36","E:\\web development\\connect-client\\src\\Pages\\Users.js":"37","E:\\web development\\connect-client\\src\\Pages\\SingleUser.js":"38","E:\\web development\\connect-client\\src\\Components\\Followbts.js":"39","E:\\web development\\connect-client\\src\\Pages\\Threads.js":"40","E:\\web development\\connect-client\\src\\Pages\\SingleThread.js":"41","E:\\web development\\connect-client\\src\\Components\\PostFormThread.js":"42","E:\\web development\\connect-client\\src\\Components\\DeleteButtonThread.js":"43","E:\\web development\\connect-client\\src\\Components\\CreateThread.js":"44","E:\\web development\\connect-client\\src\\Pages\\Profile.js":"45","E:\\web development\\connect-client\\src\\Components\\Filter.js":"46"},{"size":428,"mtime":1611699878345,"results":"47","hashOfConfig":"48"},{"size":952,"mtime":1611783608769,"results":"49","hashOfConfig":"48"},{"size":362,"mtime":1610053680005,"results":"50","hashOfConfig":"48"},{"size":777,"mtime":1611788677621,"results":"51","hashOfConfig":"48"},{"size":90,"mtime":1611698374463,"results":"52","hashOfConfig":"48"},{"size":1405,"mtime":1611882127382,"results":"53","hashOfConfig":"48"},{"size":2171,"mtime":1611774060323,"results":"54","hashOfConfig":"48"},{"size":2973,"mtime":1611774119652,"results":"55","hashOfConfig":"48"},{"size":1481,"mtime":1611774769822,"results":"56","hashOfConfig":"48"},{"size":1714,"mtime":1611882150794,"results":"57","hashOfConfig":"48"},{"size":418,"mtime":1611772488745,"results":"58","hashOfConfig":"48"},{"size":1318,"mtime":1611775144262,"results":"59","hashOfConfig":"48"},{"size":420,"mtime":1611775618330,"results":"60","hashOfConfig":"48"},{"size":1915,"mtime":1611781259225,"results":"61","hashOfConfig":"48"},{"size":335,"mtime":1611778338650,"results":"62","hashOfConfig":"48"},{"size":1485,"mtime":1611881964453,"results":"63","hashOfConfig":"48"},{"size":5140,"mtime":1611882172523,"results":"64","hashOfConfig":"48"},{"size":2089,"mtime":1611881696929,"results":"65","hashOfConfig":"48"},{"size":429,"mtime":1613513176304,"results":"66","hashOfConfig":"67"},{"size":893,"mtime":1613520288376,"results":"68","hashOfConfig":"67"},{"size":362,"mtime":1610053680005,"results":"69","hashOfConfig":"67"},{"size":1855,"mtime":1613519102242,"results":"70","hashOfConfig":"67"},{"size":3077,"mtime":1613854010194,"results":"71","hashOfConfig":"67"},{"size":1374,"mtime":1613436890038,"results":"72","hashOfConfig":"67"},{"size":7998,"mtime":1613674150315,"results":"73","hashOfConfig":"67"},{"size":7871,"mtime":1613673969353,"results":"74","hashOfConfig":"67"},{"size":6056,"mtime":1613519948110,"results":"75","hashOfConfig":"67"},{"size":4272,"mtime":1613854135386,"results":"76","hashOfConfig":"67"},{"size":446,"mtime":1613436239140,"results":"77","hashOfConfig":"67"},{"size":418,"mtime":1611772488745,"results":"78","hashOfConfig":"67"},{"size":321,"mtime":1613051252361,"results":"79","hashOfConfig":"67"},{"size":5321,"mtime":1613674405515,"results":"80","hashOfConfig":"67"},{"size":2123,"mtime":1613674529492,"results":"81","hashOfConfig":"67"},{"size":1485,"mtime":1613136043643,"results":"82","hashOfConfig":"67"},{"size":2164,"mtime":1613436450114,"results":"83","hashOfConfig":"67"},{"size":1320,"mtime":1613436651923,"results":"84","hashOfConfig":"67"},{"size":2315,"mtime":1613519495057,"results":"85","hashOfConfig":"67"},{"size":2886,"mtime":1613520074072,"results":"86","hashOfConfig":"67"},{"size":3637,"mtime":1613436574396,"results":"87","hashOfConfig":"67"},{"size":5611,"mtime":1613598914384,"results":"88","hashOfConfig":"67"},{"size":6396,"mtime":1613600405727,"results":"89","hashOfConfig":"67"},{"size":2968,"mtime":1613436631009,"results":"90","hashOfConfig":"67"},{"size":2713,"mtime":1613436495256,"results":"91","hashOfConfig":"67"},{"size":3288,"mtime":1613510077196,"results":"92","hashOfConfig":"67"},{"size":5439,"mtime":1613854252259,"results":"93","hashOfConfig":"67"},{"size":1818,"mtime":1613436521703,"results":"94","hashOfConfig":"67"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"tppx38",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"106"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"aibfi5",{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"135"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"135"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"135"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"135"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"135"},"E:\\web development\\connect\\frontend\\src\\index.js",[],["194","195"],"E:\\web development\\connect\\frontend\\src\\App.js",[],"E:\\web development\\connect\\frontend\\src\\reportWebVitals.js",[],"E:\\web development\\connect\\frontend\\src\\ApolloProvider.js",[],"E:\\web development\\connect\\frontend\\src\\provider.js",[],["196","197"],"E:\\web development\\connect\\frontend\\src\\Pages\\Home.js",[],"E:\\web development\\connect\\frontend\\src\\Pages\\Login.js",[],"E:\\web development\\connect\\frontend\\src\\Pages\\Register.js",[],"E:\\web development\\connect\\frontend\\src\\Components\\Navbar.js",[],"E:\\web development\\connect\\frontend\\src\\Components\\PostCard.js",[],"E:\\web development\\connect\\frontend\\src\\util\\hooks.js",[],"E:\\web development\\connect\\frontend\\src\\context\\auth.js",[],"E:\\web development\\connect\\frontend\\src\\util\\AuthRoute.js",[],"E:\\web development\\connect\\frontend\\src\\Components\\PostForm.js",[],"E:\\web development\\connect\\frontend\\src\\util\\graphql.js",[],"E:\\web development\\connect\\frontend\\src\\Components\\likebtn.js",[],"E:\\web development\\connect\\frontend\\src\\Pages\\SinglePost.js",[],"E:\\web development\\connect\\frontend\\src\\Components\\DeleteButton.js",[],"E:\\web development\\connect-client\\src\\index.js",[],["198","199"],"E:\\web development\\connect-client\\src\\ApolloProvider.js",[],"E:\\web development\\connect-client\\src\\reportWebVitals.js",[],"E:\\web development\\connect-client\\src\\App.js",[],"E:\\web development\\connect-client\\src\\Pages\\Login.js",[],"E:\\web development\\connect-client\\src\\context\\auth.js",[],"E:\\web development\\connect-client\\src\\Pages\\Home.js",["200"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { gql, useMutation, useQuery } from \"@apollo/react-hooks\";\r\nimport {\r\n  Button,\r\n  Dimmer,\r\n  Divider,\r\n  Form,\r\n  Grid,\r\n  Loader,\r\n  Segment,\r\n  Transition,\r\n} from \"semantic-ui-react\";\r\nimport PostCard from \"../Components/PostCard\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport PostForm from \"../Components/PostForm\";\r\n//import { FETCH_POST_QUERY } from \"../util/graphql\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useForm } from \"../util/hooks\";\r\nimport Filter from \"../Components/Filter\";\r\nimport { motion } from \"framer-motion\";\r\nfunction compare(a, b) {\r\n  if (a.createdAt < b.createdAt) {\r\n    return 1;\r\n  }\r\n  if (a.createdAt > b.createdAt) {\r\n    return -1;\r\n  }\r\n  return 0;\r\n}\r\nexport default function Home(props) {\r\n  const context = useContext(AuthContext);\r\n  const user = context.user;\r\n  const [errors, setErrors] = useState({});\r\n  const { onChange, onSubmit, values } = useForm(loginUserCallback, {\r\n    username: \"\",\r\n    password: \"\",\r\n  });\r\n  let [filter, setFilter] = useState([]);\r\n  let [posts, setPosts] = useState([]);\r\n  const [loginUser, { loading }] = useMutation(LOGIN_USER, {\r\n    update(_, result) {\r\n      //  console.log(result.data.login);\r\n\r\n      context.login(result.data.login);\r\n      // props.history.push(\"/\");\r\n      setPosts([]);\r\n      window.location.reload(false);\r\n    },\r\n    onError(err) {\r\n      setErrors(err.graphQLErrors[0].extensions.exception.errors);\r\n    },\r\n    variables: values,\r\n  });\r\n  async function loginUserCallback() {\r\n    await loginUser();\r\n  }\r\n\r\n  let { loading: loading2, data } = useQuery(FETCH_POST_QUERY);\r\n  // const { loading3, threadPosts } = useQuery(FETCH_THREAD_POST_QUERY);\r\n  if (data) {\r\n    // console.log(data);\r\n    posts = data.getFollowedPosts;\r\n    // console.log(posts);\r\n    posts.sort(compare);\r\n  }\r\n\r\n  function deletePost(id) {\r\n    posts = posts.filter((p) => p._id !== id);\r\n    setPosts([...posts]);\r\n    // console.log(posts);\r\n  }\r\n\r\n  useEffect(() => {\r\n    posts = [];\r\n    if (!user) {\r\n      setPosts([]);\r\n    }\r\n    //   console.log(posts);\r\n  }, [user]);\r\n  const pageVariants = {\r\n    initial: {\r\n      opacity: 0,\r\n      x: \"-100vw\",\r\n      scale: 0.8,\r\n    },\r\n    in: {\r\n      opacity: 1,\r\n      x: 0,\r\n      scale: 1,\r\n    },\r\n    out: {\r\n      opacity: 0,\r\n      x: \"100vw\",\r\n      scale: 1.2,\r\n    },\r\n  };\r\n  const pageTransition = {\r\n    type: \"tween\",\r\n    ease: \"anticipate\",\r\n    duration: 1,\r\n  };\r\n  // console.log(filter);\r\n  return (\r\n    <motion.div\r\n      initial=\"initial\"\r\n      animate=\"in\"\r\n      exit=\"out\"\r\n      variants={pageVariants}\r\n      transition={pageTransition}\r\n      style={{ position: \"absolute\", width: \"100%\" }}\r\n    >\r\n      {user ? (\r\n        <>\r\n          {/* <div\r\n            style={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-around\",\r\n              alignItems: \"flex-end\",\r\n            }}\r\n          >\r\n            <PostForm />\r\n            <Filter\r\n              filter={filter}\r\n              setFilter={setFilter}\r\n              loading={loading2}\r\n              threads={posts}\r\n            />\r\n          </div> */}\r\n          <Grid columns={3} relaxed stackable>\r\n            <Grid.Row className=\"title\" verticalAlign=\"bottom\" columns=\"2\">\r\n              <Grid.Column>\r\n                <PostForm />\r\n              </Grid.Column>\r\n              <Grid.Column>\r\n                <Filter\r\n                  filter={filter}\r\n                  setFilter={setFilter}\r\n                  loading={loading2}\r\n                  threads={posts}\r\n                />\r\n              </Grid.Column>\r\n            </Grid.Row>\r\n            <Grid.Row className=\"title\">\r\n              <h1 style={{ display: \"flex\", justifyContent: \"space-around\" }}>\r\n                Timeline{\" \"}\r\n              </h1>\r\n            </Grid.Row>\r\n            <Grid.Row>\r\n              {/* <Grid.Column>\r\n              <PostForm />\r\n            </Grid.Column> */}\r\n\r\n              {loading2 ? (\r\n                <Dimmer active={loading2} inverted>\r\n                  <Loader inverted>Loading</Loader>\r\n                </Dimmer>\r\n              ) : filter.length > 0 ? (\r\n                <Transition.Group>\r\n                  {posts &&\r\n                    posts.map(\r\n                      (post) =>\r\n                        filter.find((t) => t === post.threadName) && (\r\n                          <Grid.Column\r\n                            key={post._id}\r\n                            style={{ marginBottom: 20 }}\r\n                          >\r\n                            <PostCard deletePost={deletePost} post={post} />\r\n                          </Grid.Column>\r\n                        )\r\n                    )}\r\n                </Transition.Group>\r\n              ) : (\r\n                <Transition.Group>\r\n                  {posts &&\r\n                    posts.map((post) => (\r\n                      <Grid.Column key={post._id} style={{ marginBottom: 20 }}>\r\n                        <PostCard deletePost={deletePost} post={post} />\r\n                      </Grid.Column>\r\n                    ))}\r\n                </Transition.Group>\r\n              )}\r\n            </Grid.Row>\r\n          </Grid>\r\n        </>\r\n      ) : (\r\n        <Segment placeholder>\r\n          <Grid columns={2} relaxed=\"very\" stackable>\r\n            <Grid.Column>\r\n              <Form\r\n                onSubmit={onSubmit}\r\n                noValidate\r\n                className={loading ? \"loading\" : \"\"}\r\n              >\r\n                <Form.Input\r\n                  className=\"test\"\r\n                  icon=\"user\"\r\n                  iconPosition=\"left\"\r\n                  label=\"Username\"\r\n                  //labelPosition=\"right corner\"\r\n                  placeholder=\"Username\"\r\n                  name=\"username\"\r\n                  value={values.username}\r\n                  onChange={onChange}\r\n                  type=\"text\"\r\n                  error={errors.username ? true : false}\r\n                />\r\n                <Form.Input\r\n                  icon=\"lock\"\r\n                  iconPosition=\"left\"\r\n                  label=\"Password\"\r\n                  type=\"password\"\r\n                  error={errors.password ? true : false}\r\n                  placeholder=\"Password\"\r\n                  name=\"password\"\r\n                  value={values.password}\r\n                  onChange={onChange}\r\n                />\r\n\r\n                <Button type=\"submit\" content=\"Login\" primary />\r\n              </Form>\r\n              {Object.keys(errors).length > 0 && (\r\n                <div className=\"ui error message\">\r\n                  <ul className=\"list\">\r\n                    {Object.values(errors).map((value) => (\r\n                      <li key={value}>{value}</li>\r\n                    ))}\r\n                  </ul>\r\n                </div>\r\n              )}\r\n            </Grid.Column>\r\n\r\n            <Grid.Column verticalAlign=\"middle\">\r\n              <Button\r\n                as={Link}\r\n                to=\"/register\"\r\n                content=\"Sign up\"\r\n                icon=\"signup\"\r\n                size=\"big\"\r\n              />\r\n            </Grid.Column>\r\n          </Grid>\r\n\r\n          <Divider vertical>Or</Divider>\r\n        </Segment>\r\n      )}\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nconst LOGIN_USER = gql`\r\n  mutation login($username: String!, $password: String!) {\r\n    login(username: $username, password: $password) {\r\n      posts {\r\n        postID\r\n      }\r\n      followedThreads {\r\n        threadID\r\n      }\r\n      followedUsers {\r\n        userID\r\n      }\r\n      name\r\n      email\r\n      username\r\n      createdAt\r\n      token\r\n      id\r\n    }\r\n  }\r\n`;\r\n\r\nconst FETCH_POST_QUERY = gql`\r\n  {\r\n    getFollowedPosts {\r\n      threadName\r\n      _id\r\n      body\r\n      createdAt\r\n      username\r\n      likeCount\r\n      likes {\r\n        username\r\n      }\r\n      commentCount\r\n      comments {\r\n        _id\r\n        username\r\n        createdAt\r\n        body\r\n      }\r\n    }\r\n  }\r\n`;\r\n","E:\\web development\\connect-client\\src\\Components\\Navbar.js",["201"],"import React, { useContext, useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Button, Icon, Menu, Sidebar, Transition } from \"semantic-ui-react\";\r\nimport { AuthContext } from \"../context/auth\";\r\nexport default function Navbar(props) {\r\n  const { user, logout } = useContext(AuthContext);\r\n  const size = useWindowSize();\r\n  const pathname = window.location.pathname;\r\n\r\n  // console.log(path);\r\n  const path =\r\n    pathname === \"/\"\r\n      ? !user\r\n        ? \"home\"\r\n        : user.name\r\n      : pathname.substr(1) === \"users\"\r\n      ? \"Users\"\r\n      : pathname.substr(1) === \"threads\"\r\n      ? \"Threads\"\r\n      : pathname.substr(1) === \"register\"\r\n      ? \"register\"\r\n      : pathname.substr(1);\r\n\r\n  // console.log(path);\r\n  const handleItemClick = (e, { name }) => setActiveItem(name);\r\n  const [activeItem, setActiveItem] = useState(path);\r\n\r\n  const [scrollNav, setScrollNav] = useState(false);\r\n\r\n  const [visible, setVisible] = useState(false);\r\n  const changeNav = () => {\r\n    if (window.scrollY >= 50) {\r\n      setScrollNav(true);\r\n    } else {\r\n      setScrollNav(false);\r\n      setVisible(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"scroll\", changeNav);\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setActiveItem(\r\n      pathname === \"/\"\r\n        ? !user\r\n          ? \"home\"\r\n          : user.name\r\n        : pathname.substr(1) === \"users\"\r\n        ? \"Users\"\r\n        : pathname.substr(1) === \"threads\"\r\n        ? \"Threads\"\r\n        : pathname.substr(1) === \"register\"\r\n        ? \"register\"\r\n        : pathname.substr(1)\r\n    );\r\n    //console.log(\"changed\");\r\n    // window.location.reload(false);\r\n  }, [pathname]);\r\n\r\n  return (\r\n    <>\r\n      {size.width > 700 ? (\r\n        user ? (\r\n          <>\r\n            <Menu style={{}} pointing secondary size=\"massive\" color=\"teal\">\r\n              <Menu.Item\r\n                onClick={handleItemClick}\r\n                name={user.name}\r\n                active={activeItem === user.name}\r\n                as={Link}\r\n                to=\"/\"\r\n              />\r\n              {/* <Menu.Item name=\"Users\" as={Link} to=\"/users\" /> */}\r\n\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item\r\n                  name=\"Users\"\r\n                  onClick={handleItemClick}\r\n                  active={activeItem === \"Users\"}\r\n                  as={Link}\r\n                  to=\"/users\"\r\n                />\r\n                <Menu.Item\r\n                  name=\"Threads\"\r\n                  onClick={handleItemClick}\r\n                  as={Link}\r\n                  active={activeItem === \"Threads\"}\r\n                  to=\"/threads\"\r\n                />\r\n              </Menu.Menu>\r\n\r\n              <Menu.Menu position=\"right\">\r\n                <Menu.Item\r\n                  name=\"Profile\"\r\n                  onClick={handleItemClick}\r\n                  as={Link}\r\n                  active={activeItem === \"Profile\"}\r\n                  to=\"/profile\"\r\n                />\r\n                <Menu.Item\r\n                  name=\"Logout\"\r\n                  onClick={() => {\r\n                    logout();\r\n                  }}\r\n                />\r\n              </Menu.Menu>\r\n            </Menu>\r\n          </>\r\n        ) : (\r\n          <Menu pointing secondary size=\"massive\" color=\"teal\">\r\n            <Menu.Item\r\n              name=\"home\"\r\n              active={activeItem === \"home\"}\r\n              onClick={handleItemClick}\r\n              as={Link}\r\n              to=\"/\"\r\n            />\r\n\r\n            <Menu.Menu position=\"right\">\r\n              <Menu.Item\r\n                name=\"login\"\r\n                active={activeItem === \"login\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/login\"\r\n              />\r\n              <Menu.Item\r\n                name=\"register\"\r\n                active={activeItem === \"register\"}\r\n                onClick={handleItemClick}\r\n                as={Link}\r\n                to=\"/register\"\r\n              />\r\n            </Menu.Menu>\r\n          </Menu>\r\n        )\r\n      ) : (\r\n        <div style={{ marginBottom: \"20px\" }} />\r\n      )}\r\n      {user && (\r\n        <>\r\n          <Transition.Group animation=\"fly left\">\r\n            {(scrollNav || size.width < 700) && (\r\n              <Button\r\n                style={{\r\n                  position: \"fixed\",\r\n                  left: `${size.width < 700 ? \"75%\" : \"95%\"}`,\r\n                  top: `${size.width < 700 ? \"20%\" : \"\"}`,\r\n                  zIndex: 100,\r\n                }}\r\n                icon=\"bars\"\r\n                size=\"big\"\r\n                circular\r\n                color=\"teal\"\r\n                link\r\n                onClick={() => setVisible(!visible)}\r\n              />\r\n            )}\r\n          </Transition.Group>\r\n          <Sidebar\r\n            as={Menu}\r\n            animation=\"overlay\"\r\n            direction=\"left\"\r\n            icon=\"labeled\"\r\n            inverted\r\n            vertical\r\n            visible={visible && (scrollNav || size.width < 700)}\r\n            width=\"thin\"\r\n          >\r\n            <Menu.Item\r\n              name={user ? user.name : \"home\"}\r\n              onClick={(e, { name }) => {\r\n                handleItemClick(e, name);\r\n                setVisible(false);\r\n              }}\r\n              active={\r\n                user ? activeItem === user.username : activeItem === \"home\"\r\n              }\r\n              as={Link}\r\n              to=\"/\"\r\n            >\r\n              <Icon name=\"home\" />\r\n              Home\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name=\"Users\"\r\n              as={Link}\r\n              onClick={(e, { name }) => {\r\n                handleItemClick(e, name);\r\n                setVisible(false);\r\n              }}\r\n              active={activeItem === \"Users\"}\r\n              to=\"/users\"\r\n            >\r\n              <Icon name=\"users\" />\r\n              Users\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name=\"Threads\"\r\n              as={Link}\r\n              onClick={(e, { name }) => {\r\n                handleItemClick(e, name);\r\n                setVisible(false);\r\n              }}\r\n              active={activeItem === \"Threads\"}\r\n              to=\"/threads\"\r\n            >\r\n              <Icon name=\"clipboard outline\" />\r\n              Threads\r\n            </Menu.Item>\r\n            <Menu.Item\r\n              name=\"Profile\"\r\n              as={Link}\r\n              onClick={(e, { name }) => {\r\n                handleItemClick(e, name);\r\n                setVisible(false);\r\n              }}\r\n              active={activeItem === \"Profile\"}\r\n              to=\"/profile\"\r\n            >\r\n              <Icon name=\"user\" />\r\n              Profile\r\n            </Menu.Item>\r\n            <Menu.Item onClick={logout}>\r\n              <Icon name=\"sign language\" />\r\n              Logout\r\n            </Menu.Item>\r\n          </Sidebar>\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\nfunction useWindowSize() {\r\n  // Initialize state with undefined width/height so server and client renders match\r\n  // Learn more here: https://joshwcomeau.com/react/the-perils-of-rehydration/\r\n  const [windowSize, setWindowSize] = useState({\r\n    width: undefined,\r\n    height: undefined,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Handler to call on window resize\r\n    function handleResize() {\r\n      // Set window width/height to state\r\n      setWindowSize({\r\n        width: window.innerWidth,\r\n        height: window.innerHeight,\r\n      });\r\n    }\r\n\r\n    // Add event listener\r\n    window.addEventListener(\"resize\", handleResize);\r\n\r\n    // Call handler right away so state gets updated with initial window size\r\n    handleResize();\r\n\r\n    // Remove event listener on cleanup\r\n    return () => window.removeEventListener(\"resize\", handleResize);\r\n  }, []); // Empty array ensures that effect is only run on mount\r\n\r\n  return windowSize;\r\n}\r\n","E:\\web development\\connect-client\\src\\Pages\\SinglePost.js",[],"E:\\web development\\connect-client\\src\\Pages\\Register.js",[],"E:\\web development\\connect-client\\src\\util\\AuthRoute.js",[],"E:\\web development\\connect-client\\src\\util\\hooks.js",[],"E:\\web development\\connect-client\\src\\util\\graphql.js",[],"E:\\web development\\connect-client\\src\\Components\\PostCard.js",["202"],"import React, { useContext, useState } from \"react\";\r\nimport {\r\n  Card,\r\n  Icon,\r\n  Label,\r\n  Button,\r\n  Popup,\r\n  Modal,\r\n  Form,\r\n  TextArea,\r\n} from \"semantic-ui-react\";\r\nimport moment from \"moment\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { AuthContext } from \"../context/auth\";\r\nimport { LikeButton } from \"./likebtn\";\r\nimport DeleteButtonThread from \"./DeleteButtonThread\";\r\nimport DeleteButton from \"./DeleteButton\";\r\nimport gql from \"graphql-tag\";\r\nimport { useMutation } from \"@apollo/react-hooks\";\r\nexport default function PostCard({\r\n  threadCreator,\r\n  threadID,\r\n  deletePost,\r\n  post,\r\n}) {\r\n  const {\r\n    threadName,\r\n    body,\r\n    createdAt,\r\n    _id,\r\n    username,\r\n    likeCount,\r\n    commentCount,\r\n\r\n    likes,\r\n  } = post;\r\n  const { user } = useContext(AuthContext);\r\n  const [newbody, setBody] = useState(body);\r\n  const [editOn, setEditOn] = useState(false);\r\n  const [editPost] = useMutation(EDIT_POST, {\r\n    update() {\r\n      window.location.reload(false);\r\n    },\r\n    variables: {\r\n      body: newbody,\r\n      postID: _id,\r\n    },\r\n  });\r\n\r\n  function handleEdit() {\r\n    //console.log(newbody);\r\n    editPost();\r\n  }\r\n  return (\r\n    <>\r\n      <Card fluid>\r\n        <Card.Content>\r\n          <Card.Header icon>\r\n            {username}{\" \"}\r\n            {threadName !== \"\" &&\r\n              (threadID ? (\r\n                <Card.Meta\r\n                  style={{ fontSize: 15 }}\r\n                  as={Link}\r\n                  to={`/threads/${threadID}`}\r\n                >\r\n                  / {threadName}\r\n                </Card.Meta>\r\n              ) : (\r\n                <Card.Meta as={Link} to=\"/threads\" style={{ fontSize: 15 }}>\r\n                  / {threadName}\r\n                </Card.Meta>\r\n              ))}{\" \"}\r\n            {user && user.username === username && (\r\n              <Popup\r\n                content=\"Edit post\"\r\n                inverted\r\n                trigger={\r\n                  <Button\r\n                    onClick={() => setEditOn(true)}\r\n                    size=\"small\"\r\n                    basic\r\n                    icon=\"edit\"\r\n                    floated=\"right\"\r\n                  />\r\n                }\r\n              />\r\n            )}\r\n          </Card.Header>\r\n\r\n          <Card.Meta as={Link} to={`/posts/${_id}`}>\r\n            {moment(createdAt).fromNow(true)}\r\n          </Card.Meta>\r\n          <Card.Description>\r\n            {\" \"}\r\n            <TextArea\r\n              style={{\r\n                cursor: \"default\",\r\n                border: \"none\",\r\n                resize: \"none\",\r\n                width: \"100%\",\r\n                height: \"100%\",\r\n                border: \"none\",\r\n                overFlow: \"auto\",\r\n                outline: \"none\",\r\n\r\n                boxShadow: \"none\",\r\n              }}\r\n              readOnly\r\n              value={body}\r\n            />\r\n          </Card.Description>\r\n        </Card.Content>\r\n        <Card.Content extra>\r\n          <LikeButton user={user} post={{ _id, likes, likeCount }} />\r\n          <Popup\r\n            content=\"Comment on post\"\r\n            inverted\r\n            trigger={\r\n              <Button labelPosition=\"right\" as={Link} to={`/posts/${_id}`}>\r\n                <Button color=\"blue\" basic>\r\n                  <Icon name=\"comments\" />\r\n                </Button>\r\n                <Label basic color=\"blue\" pointing=\"left\">\r\n                  {commentCount}\r\n                </Label>\r\n              </Button>\r\n            }\r\n          />\r\n\r\n          {user &&\r\n            (user.username === username || user.username === threadCreator) &&\r\n            (threadID ? (\r\n              <DeleteButtonThread\r\n                threadID={threadID}\r\n                deletePost2={deletePost}\r\n                postid={_id}\r\n              />\r\n            ) : (\r\n              <DeleteButton\r\n                threadID={threadID}\r\n                deletePost2={deletePost}\r\n                postid={_id}\r\n              />\r\n            ))}\r\n        </Card.Content>\r\n      </Card>\r\n\r\n      <Modal\r\n        dimmer=\"blurring\"\r\n        size=\"mini\"\r\n        onClose={() => setEditOn(false)}\r\n        onOpen={() => setEditOn(true)}\r\n        open={editOn}\r\n        //trigger={<Button>Show Modal</Button>}\r\n      >\r\n        <Modal.Header>Edit Post</Modal.Header>\r\n        <Modal.Content image>\r\n          <Modal.Description>\r\n            <Form>\r\n              <Form.Field>\r\n                <label>Posts's body</label>\r\n                <TextArea\r\n                  style={{ resize: \"none\" }}\r\n                  onChange={(event) => setBody(event.target.value)}\r\n                  value={newbody}\r\n                />\r\n              </Form.Field>\r\n            </Form>\r\n          </Modal.Description>\r\n        </Modal.Content>\r\n        <Modal.Actions>\r\n          <Button color=\"black\" onClick={() => setEditOn(false)}>\r\n            Cancel\r\n          </Button>\r\n          <Button\r\n            disabled={newbody === \"\"}\r\n            content=\"Edit\"\r\n            //  labelPosition=\"right\"\r\n            //icon=\"checkmark\"\r\n            onClick={handleEdit}\r\n            positive\r\n          />\r\n        </Modal.Actions>\r\n      </Modal>\r\n    </>\r\n  );\r\n}\r\n\r\nconst EDIT_POST = gql`\r\n  mutation editPost($body: String!, $postID: String!) {\r\n    editPost(body: $body, postID: $postID) {\r\n      body\r\n    }\r\n  }\r\n`;\r\n","E:\\web development\\connect-client\\src\\Components\\PostForm.js",[],"E:\\web development\\connect-client\\src\\Components\\likebtn.js",[],"E:\\web development\\connect-client\\src\\Components\\DeleteButton.js",[],"E:\\web development\\connect-client\\src\\Components\\UserCard.js",[],"E:\\web development\\connect-client\\src\\Pages\\Users.js",[],"E:\\web development\\connect-client\\src\\Pages\\SingleUser.js",[],"E:\\web development\\connect-client\\src\\Components\\Followbts.js",[],"E:\\web development\\connect-client\\src\\Pages\\Threads.js",["203"],"import { useQuery } from \"@apollo/react-hooks\";\r\nimport { motion } from \"framer-motion\";\r\nimport gql from \"graphql-tag\";\r\nimport React, { useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Button,\r\n  Card,\r\n  Dimmer,\r\n  Grid,\r\n  Icon,\r\n  Loader,\r\n  Transition,\r\n} from \"semantic-ui-react\";\r\nimport CreateThread from \"../Components/CreateThread\";\r\nimport Followbts from \"../Components/Followbts\";\r\nimport PostCard from \"../Components/PostCard\";\r\n\r\nexport default function Threads() {\r\n  const [createOn, setCreateOn] = useState(false);\r\n  const { loading, data } = useQuery(FETCH_THREADS);\r\n  let [threads, setThreads] = useState([]);\r\n  if (data) {\r\n    threads = data.getThreads;\r\n\r\n    // console.log(threads);\r\n\r\n    //threads = threads.filter((u) => u.id !== user.id);\r\n    //console.log(users, user);\r\n  }\r\n  const pageVariants = {\r\n    initial: {\r\n      opacity: 0,\r\n      x: \"-100vw\",\r\n      scale: 0.8,\r\n    },\r\n    in: {\r\n      opacity: 1,\r\n      x: 0,\r\n      scale: 1,\r\n    },\r\n    out: {\r\n      opacity: 0,\r\n      x: \"100vw\",\r\n      scale: 1.2,\r\n    },\r\n  };\r\n  const pageTransition = {\r\n    type: \"tween\",\r\n    ease: \"anticipate\",\r\n    duration: 1,\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial=\"initial\"\r\n      animate=\"in\"\r\n      variants={pageVariants}\r\n      transition={pageTransition}\r\n      exit=\"out\"\r\n      className=\"formContainer\"\r\n      style={{ position: \"absolute\", width: \"100%\" }}\r\n    >\r\n      <Dimmer active={loading} inverted>\r\n        <Loader inverted>Loading</Loader>\r\n      </Dimmer>\r\n      <div style={{ marginTop: \"40px\" }}>\r\n        <div className=\"\">\r\n          <Grid relaxed stackable celled columns=\"equal\">\r\n            <Grid.Column>\r\n              <Grid columns=\"1\">\r\n                <div style={{ overflow: \"auto\", maxHeight: \"600px\" }}>\r\n                  <h4 style={{ textAlign: \"center\" }}>Threads</h4>\r\n                  {loading\r\n                    ? \"\"\r\n                    : threads.map((t) => (\r\n                        <Grid.Row>\r\n                          <Card style={{ height: \"100%\", margin: \"20px\" }}>\r\n                            <Card.Content\r\n                              as={Link}\r\n                              to={`/threads/${t.thread._id}`}\r\n                              header={t.thread.name}\r\n                            />\r\n                            <Card.Content\r\n                              description={`Created by ${t.thread.creatorUsername} on 2021`}\r\n                            />\r\n                            <Card.Content\r\n                              style={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-around\",\r\n                              }}\r\n                              extra\r\n                            >\r\n                              <Icon name=\"pencil\">\r\n                                {t.thread.posts.length} post\r\n                                {t.thread.posts.length !== 1 && \"s\"}\r\n                              </Icon>\r\n                              <Followbts threadID={t.thread._id} />\r\n                            </Card.Content>\r\n                          </Card>\r\n                        </Grid.Row>\r\n                      ))}\r\n                </div>\r\n              </Grid>\r\n            </Grid.Column>\r\n            <Grid.Column>\r\n              <Grid columns={2}>\r\n                <Grid.Row className=\"title\">\r\n                  <Grid.Column>\r\n                    <h1>Popular Posts</h1>\r\n                  </Grid.Column>\r\n                  <Grid.Column>\r\n                    <Button\r\n                      style={{}}\r\n                      color=\"teal\"\r\n                      size=\"massive\"\r\n                      floated=\"right\"\r\n                      onClick={() => setCreateOn(true)}\r\n                    >\r\n                      Create Thread\r\n                    </Button>\r\n                  </Grid.Column>\r\n                </Grid.Row>\r\n\r\n                {loading ? (\r\n                  \"\"\r\n                ) : (\r\n                  <Transition.Group>\r\n                    <div className=\"thread\">\r\n                      {threads &&\r\n                        threads.map((t) =>\r\n                          t.posts.map((post) => (\r\n                            <Grid.Row\r\n                              //className=\"thread\"\r\n                              key={post.id}\r\n                              // style={{ marginBottom: 20, width: \"25%\" }}\r\n                            >\r\n                              <PostCard\r\n                                threadCreator={t.thread.creatorUsername}\r\n                                threadID={t.thread._id}\r\n                                post={post}\r\n                              />\r\n                            </Grid.Row>\r\n                          ))\r\n                        )}\r\n                    </div>\r\n                  </Transition.Group>\r\n                )}\r\n              </Grid>\r\n            </Grid.Column>\r\n          </Grid>\r\n        </div>\r\n      </div>\r\n\r\n      <CreateThread createOn={createOn} setCreateOn={setCreateOn} />\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nconst FETCH_THREADS = gql`\r\n  {\r\n    getThreads {\r\n      posts {\r\n        threadName\r\n        _id\r\n        body\r\n        createdAt\r\n        username\r\n        likeCount\r\n        likes {\r\n          username\r\n        }\r\n        commentCount\r\n        comments {\r\n          _id\r\n          username\r\n          createdAt\r\n          body\r\n        }\r\n      }\r\n      thread {\r\n        creatorUsername\r\n        _id\r\n        posts {\r\n          postID\r\n        }\r\n        name\r\n      }\r\n    }\r\n  }\r\n`;\r\n","E:\\web development\\connect-client\\src\\Pages\\SingleThread.js",[],"E:\\web development\\connect-client\\src\\Components\\PostFormThread.js",[],"E:\\web development\\connect-client\\src\\Components\\DeleteButtonThread.js",[],"E:\\web development\\connect-client\\src\\Components\\CreateThread.js",[],"E:\\web development\\connect-client\\src\\Pages\\Profile.js",[],"E:\\web development\\connect-client\\src\\Components\\Filter.js",[],{"ruleId":"204","replacedBy":"205"},{"ruleId":"206","replacedBy":"207"},{"ruleId":"204","replacedBy":"208"},{"ruleId":"206","replacedBy":"209"},{"ruleId":"204","replacedBy":"210"},{"ruleId":"206","replacedBy":"211"},{"ruleId":"212","severity":1,"message":"213","line":74,"column":13,"nodeType":"214","endLine":74,"endColumn":15},{"ruleId":"212","severity":1,"message":"215","line":60,"column":6,"nodeType":"214","endLine":60,"endColumn":16,"suggestions":"216"},{"ruleId":"217","severity":1,"message":"218","line":103,"column":17,"nodeType":"219","messageId":"220","endLine":103,"endColumn":23},{"ruleId":"221","severity":1,"message":"222","line":22,"column":17,"nodeType":"223","messageId":"224","endLine":22,"endColumn":27},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],["225"],["226"],["225"],["226"],"react-hooks/exhaustive-deps","Assignments to the 'posts' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","ArrayExpression","React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["227"],"no-dupe-keys","Duplicate key 'border'.","ObjectExpression","unexpected","no-unused-vars","'setThreads' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation",{"desc":"228","fix":"229"},"Update the dependencies array to be: [pathname, user]",{"range":"230","text":"231"},[1678,1688],"[pathname, user]"]